<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Regex Tester: test your js regular expressions</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="apple-mobile-web-app-title" content="Tool" />
    <meta name="application-name" content="Tool" />

    <meta property="og:title" content="Tool">
    <meta name="description" content="Test your regular expressions">
    <meta property="og:description" content="Test your regular expressions">
    <meta property="og:locale" content="en_US">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://eakondratiev.github.io/">
    <meta name="google-site-verification" content="DG8CDSi7XJOTIAp-BDhrgPccz9Js2GR8G1EKSbn_Dek" />
    <meta name="msvalidate.01" content="8DEC6FAF984E8A6C5DC915A0BABC8B19" />
    <link rel="canonical" href="https://eakondratiev.github.io/regex.htm">

    <meta name="msapplication-config" content="/assets/icons/browserconfig.xml" />
    <meta name="theme-color" content="#ffffff" />
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/icons/apple-touch-icon-180.png" />
    <link rel="manifest" href="/assets/icons/manifest.json" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-96.png" sizes="96x96" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-16.png" sizes="16x16" />
  
    <link href="/assets/main.css?20220317" rel="stylesheet" type="text/css" />
    <style>
      textarea {font-size:1rem; padding: 2pt; max-width: 95vw;}
      .re-flags label {margin-right: 16pt; white-space:nowrap;}
      .btns {margin: 8pt 0;}
      .match-true  {background-color: #9d7; color:#000; padding: 0 4pt;}
      .match-false {background-color: #fbb; color:#000; padding: 0 4pt;}
      .re-space {background-color: #fd0; padding:0 2pt;}
      .re-match h4 {font-weight: normal; margin-top: 8pt; opacity:0.7;}
      .err {color:#e00;}
    </style>
    <script src="/assets/web-app.js"></script>
    <script src="/assets/menu.min.js?20220510"></script>
    <script><!-- Clarity tracking code -->
        (function(c,l,a,r,i,t,y){
            c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
            t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i+"?ref=bwt";
            y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
        })(window, document, "clarity", "script", "amp2on3c4r");
    </script>
  </head>
  <body>
    <div class="main-content">
      <div class="page-wide header">
        <header class="content">
          <button class="site-menu-btn" aria-label="Open the site menu">
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div class="site-title"><a class="site-logo" href="/">TOOL</a></div>
        </header>
        <nav class="content site-nav" aria-label="Site menu">
          <h3 class="site-nav-header">Online Tools</h3>
          <ul>
          <li class="site-nav-top-item"><a href="regex.htm">Regex Tester</a></li>
          <li class="site-nav-top-item"><a href="roman-numerals.htm">Convert a Roman Number</a></li>
          <li class="site-nav-top-item"><a href="iprange.htm">IPv4 Ranges</a></li>
          <li class="site-nav-top-item"><a href="speed.htm">Speed &amp; Distance</a></li>
          <li class="site-nav-top-item"><a href="ws.htm">White Spaces</a></li>
          <li class="site-nav-top-item"><a href="floating-point-representation.htm">Representation of Floating-point Numbers 32 and 64 bits</a></li>
          <li class="site-nav-top-item"><a href="floating-point-summation.htm">Floating-point Summation</a></li>
          </ul>
          <h3 class="site-nav-header">Console Tools</h3>
          <ul>
            <li class="site-nav-top-item"><a href="crd-reader.htm">CRD Reader</a></li>
          </ul>
        </nav>
      </div>
      <div class="page-wide">
        <div class="content page-content">
          <div id="incompatible-browser">Please, update yopur browser.</div>

          <h1>Test your regular expressions</h1>
          <div>Javascript flavor</div>

          <div style="margin:16pt 0;">
            <div class="page-field-name">Regular E<u>x</u>pression</div>
            <textarea cols="55" rows="2" name="re" id="source-re" accesskey="X" title="Enter the regular expression here"></textarea>
            <div class="page-field-name">S<u>o</u>urce String</div>
            <textarea cols="55" rows="2" name="ss" id="source-string" accesskey="O" title="Enter the source string here"></textarea>
            <div class="page-field-name">R<u>e</u>placement String, optional</div>
            <textarea cols="55" rows="2" name="rs" id="source-replace" accesskey="E" title="Optionally eneter the replacement string"></textarea>
            <div class="page-field-name">Flags</div>
            <div class="re-flags">
              <label><input type="checkbox" id="flag-global" accesskey="G" value="g" checked /> glo<u>b</u>al</label>
              <label><input type="checkbox" id="flag-ignorecase" accesskey="I" value="i" checked /> <u>i</u>gnore case</label>
              <label><input type="checkbox" id="flag-multiline" accesskey="M" value="m" /> <u>m</u>ultiline</label>
            </div>
            <div class="btns">
            <button type="button" class="form-button" accesskey="T" data-title="Test" id="button-test"><u>T</u>est</button>
            <button type="button" class="form-button" accesskey="R" data-title="Reset" id="button-reset"><u>R</u>eset</button>
            <button type="button" class="form-button" accesskey="S" data-title="Share" id="button-share"><u>S</u>hare</button>
            </div>
          </div>
          <div id="message-block" class="page-message page-message--info" style="display: none;"></div>
          <p>
            See
            <a href="regex.htm?regex=First_Name%3A%20(%5Cw%2B)%2C%20Last_Name%3A%20(%5Cw%2B)&src=First_Name%3A%20Jane%2C%20Last_Name%3A%20Smith&rep=Full%20name%3A%20%241%20%242">
            an example</a> and
            <a href="regex.htm?regex=First_Name%3A%20(%3F<fn>%5Cw%2B)%2C%20Last_Name%3A%20(%3F<ln>%5Cw%2B)&src=First_Name%3A%20Jane%2C%20Last_Name%3A%20Smith&rep=Full%20name%3A%20%24<fn>%20%24<ln>">
            example with named groups</a>.
          </p>

          <div id="result-block" style="display:none;">
            <h3>Result</h3>
            <div id="result"></div>
          </div>

          <p><a target="_blank" href="http://www.regexper.com/" rel="nofollow noreferrer">Regexp visualization</a></p>

          <p>NOTE: some regexes can make your browser unresponsive, read about it on
            <a target="_blank" href="https://en.wikipedia.org/wiki/ReDoS#Evil_regexes" rel="nofollow noreferrer">Wikipedia</a>.
          </p>

          <div class="page-tags">
            <b>#RegExp</b> <b>#Regex</b> <b>#JS</b>
          </div>
        </div>
      </div>
    </div>
    <div class="page-wide footer">
      imperfect <b>tools</b>
    </div>
    <script>
      (function () {
        'use strict';
        var PAGE_DB_PREFIX = 'cb-regex-',
          RE_SPACE = /^\s+$/,
          testRe = document.getElementById('source-re'),
          replacementString = document.getElementById('source-replace'),
          sourceString = document.getElementById('source-string'),
          jsResultBlock = document.getElementById('result'),
          resultBlock = document.getElementById('result-block'),
          messageBlock = document.getElementById('message-block'),
          flagGlobalElement = document.getElementById('flag-global'),
          flagIgnorecaseElement = document.getElementById('flag-ignorecase'),
          flagMultilineElement = document.getElementById('flag-multiline'),
          btn = document.getElementById('button-test'),
          btnReset = document.getElementById('button-reset'),
          btnShare = document.getElementById('button-share'),
          urlParams = T.getUrlParameters(),
          db = new T.Db();

        if (!Element.prototype.addEventListener) {

          document.getElementById('incompatible-browser').style.display = 'block';
          return;

        }

        if (urlParams.regex !== undefined ||
            urlParams.src !== undefined ||
            urlParams.rep !== undefined) {

          if (urlParams.regex !== undefined) {
            testRe.value = decodeURIComponent (urlParams.regex);
          }
          if (urlParams.src !== undefined) {
            sourceString.value = decodeURIComponent (urlParams.src);
          }
          if (urlParams.rep !== undefined) {
            replacementString.value = decodeURIComponent (urlParams.rep);
          }

          // no call because the re can contains evil code
          //doTest ();
        }
        else {
          initializeFromDb ();
        }

        // Event handlers
        testRe.addEventListener('keyup', doTest);
        replacementString.addEventListener('keyup', doTest);
        sourceString.addEventListener('keyup', doTest);
        btn.addEventListener('click', doTest);
        btnReset.addEventListener('click', reset);
        btnShare.addEventListener('click', share);

        flagGlobalElement.addEventListener('change', saveFlag);
        flagIgnorecaseElement.addEventListener('change', saveFlag);
        flagMultilineElement.addEventListener('change', saveFlag);

        /**
         * Clears the result text and styles, hide messages.
         */
        function clearResults() {

          testRe.style.border = '';
          resultBlock.style.display = 'block';
          jsResultBlock.innerHTML = '';
          messageBlock.style.display = 'none';

        }

        /**
         * Does the regex test.
         * @param (*} event the DOM event, optional.
         */
        function doTest(event) {

          var re,
            flags = '',
            m,
            i,
            group,
            hdr = true,
            html = '',
            src = sourceString.value;

          clearResults ();

          if (event !== undefined) {

            if (event.keyCode !== undefined && event.keyCode !== 13) {
              // A key was pressed by not Enter
              return;
            }

            // Cancel the default action, if needed
            event.preventDefault();

          }

          // Save values in the browser db
          db.set(PAGE_DB_PREFIX + 'regex', testRe.value);
          db.set(PAGE_DB_PREFIX + 'src', src);
          db.set(PAGE_DB_PREFIX + 'repl', replacementString.value);

          // do test
          if (testRe.value.length === 0) {
            testRe.style.border = '1px solid #e00';
            return;
          }

          // get flags
          if (flagGlobalElement.checked) { flags += 'g'; }
          if (flagIgnorecaseElement.checked) { flags += 'i'; }
          if (flagMultilineElement.checked) { flags += 'm'; }

          try {

            re = new RegExp(testRe.value, flags);

            jsResultBlock.innerHTML += '<p class="code">var re = <b>/' +
              testRe.value + '/' + flags + '</b>;</p>';

            // 1. isMatch
            (function(){
              // NOTE: the regexp is statefull witg the g (and y) flag,
              //       so another instance is created here.
              var r = new RegExp(testRe.value, flags),
                res = '' + r.test(src); // string "true" or "false"
              jsResultBlock.innerHTML += '<p><b>Is match</b>: <span class="match-' + res + '">' + res + '</span></p>';
            })();

            // 2. groups
            while ((m = re.exec(src)) !== null) {

              if (hdr) {
                html += '<h3>Matche(s):</h3>';
                hdr = false;
              }

              html += '<div class="re-match">';

              for (i = 0; i < m.length; i++) {
                html += getMatchHtml (i, m[i]) + '<br>';
              }

              html += '</div>';

              // named groups
              if (m.groups !== undefined) {

                html += '<div class="re-match">' +
                  '<h4>Named groups</h4>';

                for (group in m.groups) {

                  html += '<div>' + group + ': <b>' + m.groups[group] + '</b></div>';
                }

                html += '</div>';

              }

            }

            jsResultBlock.innerHTML += html;

            // 3. replacement
            if (replacementString.value.length > 0) {
              jsResultBlock.innerHTML += '<h3>Result of replacement</h3><p>' +
                src.replace(re, replacementString.value) + '</p>';
            }

          }
          catch (e) {
            jsResultBlock.innerHTML = '<div>Error:</div><div class="err">' +
              e.toString() +
              '</div>';
          }

        }

        /**
         * Returns html string for the match.
         * @param {number} index the match index.
         * @param {string} match the match text.
         */
        function getMatchHtml (index, match) {

          var t,
            hdr = '';

          if (RE_SPACE.test(match)) {
            // make space visible
            t = '<span class="re-space">&middot;</span>';
          }
          else {
            t = match;
          }

          if (index === 0) {
            hdr = '<h4>The full string of characters matched</h4>';
          }
          else if (index === 1) {
            hdr = '<h4>The parenthesized substring matches</h4>';
          }

          return hdr + '<b>' + t + '</b>';

        }

        /**
         * Saves the value of the checkbox in the browser db.
         * @param {*} event the event.
         */
        function saveFlag(event) {

          var cb = event.target;

          if (cb) {
            db.set (PAGE_DB_PREFIX + cb.value, cb.checked);
          }
        }

        /**
         * Sets the form values from browser db.
         */
        function initializeFromDb () {

          var cbList = [flagGlobalElement, flagIgnorecaseElement, flagMultilineElement],
            i,
            v;

          v = db.get(PAGE_DB_PREFIX + 'regex');
          testRe.value = v? v : '';

          v = db.get(PAGE_DB_PREFIX + 'src');
          sourceString.value = v? v : '';

          v = db.get(PAGE_DB_PREFIX + 'repl');
          replacementString.value = v? v : '';

          for (i = 0; i < cbList.length; i++) {

            v = db.get(PAGE_DB_PREFIX + cbList[i].value);

            if (v !== undefined && v !== null) {
              cbList[i].checked = (v === 'true')? true : false;
            }
          }

        }

        /**
         * Resets the form.
         */
        function reset () {

          testRe.value = '';
          sourceString.value = '';
          replacementString.value = '';

          flagGlobalElement.checked = true;
          flagIgnorecaseElement.checked = true;
          flagMultilineElement.checked = false;

          db.remove (PAGE_DB_PREFIX + 'regex');
          db.remove (PAGE_DB_PREFIX + 'src');
          db.remove (PAGE_DB_PREFIX + 'repl');
          db.remove (PAGE_DB_PREFIX + 'g');
          db.remove (PAGE_DB_PREFIX + 'i');
          db.remove (PAGE_DB_PREFIX + 'm');

          clearResults ();

        }

        /**
         * Copies the page url to the clipboard for sharing.
         */
        function share() {

          var urlBase = location.protocol + '//' + location.host + '/regex.htm',
            qs = '',
            params = [];

          if (!navigator.clipboard) {
            messageBlock.innerHTML = 'This function requires HTTPS protocol or localhost.';
            messageBlock.style.display = 'block';
          }
          else {
            // make
            if (testRe.value.length > 0) {
              params.push ('regex=' + encodeURIComponent (testRe.value));
            }
            if (sourceString.value.length > 0) {
              params.push ('src=' + encodeURIComponent (sourceString.value));
            }
            if (replacementString.value.length > 0) {
              params.push ('rep=' + encodeURIComponent (replacementString.value));
            }

            if (params.length > 0) {
              qs = '?' + params.join ('&');
            }

            // copy
            navigator.clipboard.writeText(urlBase + qs);
    
            /* Alert the copied text */
            messageBlock.innerHTML = 'The page url was copied to the clipboard:<div style="word-break: break-all;">' +
              urlBase + qs.replace (/&/g, '&amp;') + '</div>';
            messageBlock.style.display = 'block';
          }

        }

      })();
    </script>
  </body>
</html>