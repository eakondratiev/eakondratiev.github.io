<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>File Signature</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="apple-mobile-web-app-title" content="File Signature" />
    <meta name="application-name" content="File Signature" />

    <meta property="og:title" content="File Signature">
    <meta name="description" content="This online utility app will show a file signature.">
    <meta property="og:description" content="This online utility app will show a file signature.">
    <meta property="og:locale" content="en_US">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://eakondratiev.github.io/file-signature.htm">
    <link rel="canonical" href="https://eakondratiev.github.io/file-signature.htm">

    <meta name="msapplication-config" content="/assets/icons/browserconfig.xml" />
    <meta name="theme-color" content="#444444" />
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/icons/apple-touch-icon-180.png" />
    <link rel="manifest" href="/assets/icons/manifest.json" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-96.png" sizes="96x96" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="/assets/icons/favicon-16.png" sizes="16x16" />
  
    <link href="/assets/main.css?20220622" rel="stylesheet" type="text/css" />
    <script src="/assets/menu.min.js?20220730"></script>
    <script src="/assets/web-app.js"></script>
    <style>
      .file-signature {font-size:0.9rem; margin: 16pt 0; color:#333;}
      .file-prop {display: flex; margin: 8pt;}
      .file-prop-name {width: 75pt;}
      .file-prop-value {font-style: italic; max-width: 250pt; text-overflow: ellipsis;}
      .list-all {font-size:0.9rem;}
      .file-bytes {font-style: normal;}
    </style>
  <body>
    <div class="main-content">
      <div class="page-wide header">
        <header class="content">
          <button class="site-menu-btn" aria-label="Open the site menu">
            <div></div>
            <div></div>
            <div></div>
          </button>
          <div class="site-title"><a class="site-logo" href="/">TOOL</a></div>
        </header>
        <nav class="content site-nav" aria-label="Site menu">
          <h3 class="site-nav-header">Online Tools</h3>
          <ul>
          <li class="site-nav-top-item"><a href="regex.htm">Regex Tester</a></li>
          <li class="site-nav-top-item"><a href="roman-numerals.htm">Convert a Roman Number</a></li>
          <li class="site-nav-top-item"><a href="iprange.htm">IPv4 Ranges</a></li>
          <li class="site-nav-top-item"><a href="speed.htm">Speed &amp; Distance</a></li>
          <li class="site-nav-top-item"><a href="ws.htm">White Spaces</a></li>
          <li class="site-nav-top-item"><a href="floating-point-representation.htm">Representation of Floating-point Numbers 32 and 64 bits</a></li>
          <li class="site-nav-top-item"><a href="floating-point-summation.htm">Floating-point Summation</a></li>
          </ul>
          <h3 class="site-nav-header">Console Tools</h3>
          <ul>
            <li class="site-nav-top-item"><a href="crd-reader.htm">CRD Reader</a></li>
          </ul>
        </nav>
      </div>
      <div class="page-wide">
        <div class="content page-content">
          <noscript><div>This site uses javascript. Please, turn it on in your browser settings.</div></noscript>
          <div id="incompatible-browser">Please, update your browser.</div>
          <h1>File Signature</h1>
          <p>This online utility app shows a file signature.</p>

          <div class="fp-form">
            <input type="file" id="input-file" accesskey="F" placeholder="Select a file" value="" aria-label="Select a file">
          </div>

          <div class="file-signature"></div>
          <div class="list-all"></div>

          <p style="font-size:0.8rem;">
            Source: <a href="https://en.wikipedia.org/wiki/List_of_file_signatures" target="_blank" rel="noreferrer">List of file signatures, WIkipedia.org</a>
          </p>
          <div class="page-tags">
            <b>#Tool</b>
          </div>
        </div>
      </div>
    </div>
    <div class="page-wide footer">
      imperfect <b>tools</b>
    </div>
    <script>
      'use strict';

      var _ToolNoLogs = true; // TODO: remove on prod

      /** Definitions */
      var SIGNATURES = {
        'OracleVMDisk': {description: 'VirtualBox Virtual Hard Disk'},
        'PuTTY-key2': {description: 'PuTTY private key file version 2'},
        'PuTTY-key3': {description: 'PuTTY private key file version 3'},
        'pem-crt': {description: 'PEM encoded X.509 certificate'},
        'pem-csr': {description: 'PEM encoded X.509 Certificate Signing Request'},
        'pem-key': {description: 'PEM encoded X.509 PKCS#8 private key'},
        'pem-DSAkey': {description: 'PEM encoded X.509 PKCS#1 DSA private key'},
        'pem-RSAkey': {description: 'PEM encoded X.509 PKCS#1 RSA private key'},
        'AppleWorks5': {description: 'AppleWorks 5 document'},
        'AppleWorks6': {description: 'AppleWorks 6 document'},
        'EPS3.0': {description: 'Encapsulated PostScript file version 3.0'},
        'EPS3.1': {description: 'Encapsulated PostScript file version 3.1'},
        'SQLite3': {description: 'SQLite Database'},
        'ASF-WMA-WMV': {description: 'asf, wma, wmv - Advanced Systems Format'},
        'DJVU': {description: 'DjVu document'},
        'AIFF': {description: 'AIFF, Audio Interchange File Format'},
        'wav':  {description: 'wav, Waveform Audio File Format'},
        'avi':  {description: 'avi, Audio Video Interleave video format'},
        'webp': {description: 'Google WebP image file'},
        'ani':  {description: 'Animated cursor'},
        'dcr':  {description: 'Adobe Shockwave file'},
        'dir':  {description: 'Macromedia Director file'},
        'JPEG': {description: 'JPEG raw or in the JFIF or Exif'},
        'JPEG2000': {description: 'JPEG 2000 file'},
        'WinHtmlHelp': {description: 'chm, Microsoft Windows HtmlHelp file'},
        'CanonRAW': {description: 'Canon RAW Format Version 2'},
        'vhd':  {description: 'Windows Virtual PC Virtual Hard Disk'},
        'vhdx': {description: 'Windows Virtual PC Windows 8 Virtual Hard Disk file'},
        'evtx': {description: 'Windows Event Viewer XML file'},
        'TAR': {description: 'tar archive'},
        'deb': {description: 'Linux deb file'},
        'mp4': {description: 'ISO Base Media file (MPEG-4)'},
        'OfficeOld': {description: 'Compound File Binary Format, a container format defined by Microsoft COM.' +
                  ' It can contain the equivalent of files and directories.' +
                  ' It is used by <b>Windows Installer</b> and for documents in <b>older versions of Microsoft Office</b>.'},
        'MS-SDI': {description: 'SDI, System Deployment Image, a disk image format used by Microsoft'},
        'PNG': {description: 'png, Image encoded in the Portable Network Graphics format'},
        'RAR1.5': {description: 'rar, Roshal ARchive compressed archive v1.50 onwards'},
        'RAR5':   {description: 'rar, Roshal ARchive compressed archive v5.00 onwards'},
        'WinUpdDelta': {description: 'Windows Update Binary Delta Compression file'},
        'xcf': {description: 'XCF file, GIMP native'},
        'GIF87a': {description: 'gif, Image file encoded in the Graphics Interchange Format (GIF87a)'},
        'GIF89a': {description: 'gif, Image file encoded in the Graphics Interchange Format (GIF89a)'},
        '7z': {description: '7-Zip File Format'},
        'xz': {description: 'xz, tar.xz - XZ compressed file, LZMA2 compression'},
        'ftyp3g': {description: '3rd Generation Partnership Project 3GPP and 3GPP2 multimedia files'},
        'PDF': {description: 'PDF document'},
        'iso-sdi': {description: 'cdi, CD-i CD image file'},
        'ttf': {description: 'TrueType font'},
        'ico': {description: 'Computer icon encoded in ICO file format'},
        'elf': {description: 'Executable and Linkable Format'},
        'OGGS': {description: 'Ogg, an open source media container format'},
        'PSD': {description: 'Adobe Photoshop\'s native file'},
        'Mach-O32': {description: 'Mach-O binary, 32-bit'},
        'Mach-O64': {description: 'Mach-O binary, 64-bit'},
        'Mach-O32rev': {description: 'Mach-O binary, reverse byte ordering scheme, 32-bit'},
        'Mach-O64rev': {description: 'Mach-O binary, reverse byte ordering scheme, 64-bit'},
        'ZIP': {description: 'zip file format and formats based on it, such as EPUB, JAR, ODF, OOXML'},
        'LZIP': {description: 'lzip compressed file'},
        'LZ4': {description: 'LZ4 compressed file'},
        'TDF': {description: 'Telegram Desktop File'},
        'TDEF': {description: 'Telegram Desktop Encrypted File'},
        'AppleIcon': {description: 'Apple Icon Image format'},
        'PostScript': {description: 'PostScript document'},
        'TIFF(le)': {description: 'TIFF, Tagged Image File Format, little-endian'},
        'TIFF(be)': {description: 'TIFF, Tagged Image File Format, big-endian'},
        'OpenEXR': {description: 'OpenEXR image'},
        'BPG': {description: 'Better Portable Graphics format'},
        'Cineon': {description: 'Kodak Cineon image'},
        'JavaClass': {description: 'Java class file, Mach-O Fat Binary'},
        'FLAC': {description: 'Free Lossless Audio Codec'},
        'FLIF': {description: 'Free Lossless Image Format'},
        'MKV': {description: 'mkv, mka, mks, mk3d, webm - Matroska media container, including WebM'},
        'MIDI': {description: 'MIDI sound file'},
        'CRX': {description: 'Google Chrome extension or packaged app'},
        'FH8': {description: 'FreeHand 8 document'},
        'FH9': {description: 'FreeHand 9 document'},
        'XAR': {description: 'xar, eXtensible ARchive format'},
        'NES-ROM': {description: 'Nintendo Entertainment System ROM file'},
        'TOX': {description: 'Open source portable voxel file'},
        'MLV': {description: 'Canon Magic Lantern Video file'},
        'CAB': {description: 'cab, Microsoft Cabinet file'},
        'luac': {description: 'Lua bytecode'},
        'woff': {description: 'WOFF File Format 1.0'},
        'woff2': {description: 'WOFF File Format 2.0'},
        'wasm': {description: 'WebAssembly binary format'},
        'MPEG-Stream': {description: 'MPEG Program Stream'},
        'MPEG-Video': {description: 'MPEG-1 video and MPEG-2 video'},
        'PGP': {description: 'PGP file'},
        'cab': {description: 'cab, InstallShield CAB Archive File'},
        'wmf': {description: 'wmf, Windows Metafile, image file'},
        'evt': {description: 'evt, Windows Event Viewer file'},
        'icm': {description: 'icm, ICC profile, color correction'},
        'dat-reg': {description: 'dat, Windows Registry file'},
        'otf': {description: 'OpenType font'},
        'UTF8': {description: 'UTF-8 byte order mark, commonly seen in text files'},
        'FLV': {description: 'flv, Flash Video file'},
        'CRD-RRG': {description: 'crd, Microsoft Windows Cardfile Database Format, RRG card file'},
        'CRD-MGC': {description: 'crd, Microsoft Windows Cardfile Database Format, MGC card file'},
        'SWF': {description: 'swf, Adobe Flash'},
        'mp3ID3v2': {description: 'MP3 file with an ID3v2 container'},
        'mp3': {description: 'MP3, MPEG-1 Layer 3 file without an ID3 tag or with an ID3v1 tag'},
        'bmp': {description: 'BMP file, a bitmap format used mostly in the Windows world'},
        'UTF16LE': {description: 'Text file with UTF-16LE byte order mark'},
        'UTF16BE': {description: 'Text file with UTF-16BE byte order mark'},
        'DosMZ': {description: 'DOS MZ executable and its descendants (including NE and PE)'},
        'DosZM': {description: 'DOS ZM executable and its descendants (rare)'},
        'Shebang': {description: 'Script or data to be passed to the program following the shebang (#!)'},
        'tar-LZW': {description: 'Compressed file (often tar zip) using Lempel-Ziv-Welch algorithm'},
        'tar-LZH': {description: 'Compressed file (often tar zip) using LZH algorithm'},
        'gz': {description: 'GZIP compressed file'},
        'arj': {description: 'ARJ compressed file'},
        'CPM3': {description: 'com, executable file, CP/M 3 and higher with overlays'},
        'PIC-PIF-SEA-OCR': {description: 'PIC (IBM Storyboard bitmap file) or PIF (Windows Program Information File)' +
                           ' or SEA (Mac Stuffit Self-Extracting Archive) or YTR (IRIS OCR data file)'},
        'MPEG-Transport': {description: 'ts, tsv, tsa, mpg, mpeg - MPEG Transport Stream (MPEG-2 Part 1)'},
        'MOV': {description: 'QuickTime MOV, a video container'}

      };

      // check for compatibility
      if (document.getElementsByClassName === undefined ||
         window.fetch === undefined ||
         typeof WebAssembly !== "object" ||
         typeof WebAssembly.instantiate !== "function" ||
         !Element.prototype.addEventListener ||
         !Array.prototype.map ||
         !Array.prototype.reduce) {

        document.getElementById('incompatible-browser').style.display = 'block';

      }
      else {

        var fileElement = document.getElementById ('input-file');
        var resultElement = document.getElementsByClassName('file-signature')[0];

        var listAll = document.getElementsByClassName('list-all')[0].innerHTML = listAllDescriptions(SIGNATURES);

        showFileProperties(fileElement, resultElement);

        fileElement.addEventListener('keypress', function(e) { 
          if (e.key === 'Enter') {
            showFileProperties(fileElement, resultElement);
          }
        });

        fileElement.addEventListener('change', function(e) {
          showFileProperties(fileElement, resultElement);
        });
      }

      /**
       * Appends the file properties to the result element.
       * @param {*} fileElement
       * @param {*} resultElement
       */
      function showFileProperties(fileElement, resultElement) {

        var r = '';
        var file;
        var reader = new FileReader();

        if (fileElement.files === undefined ||
            fileElement.files.length === 0) {

          r = 'Please, select a file.';
        }
        else {
          file = fileElement.files[0];

          r =
            getResultProperty ('File name', file.name) +
            getResultProperty ('File MIME type', file.type) +
            getResultProperty ('File size', formatFileSize (file.size));

          reader.readAsArrayBuffer (file);

          reader.onload = function (e) {
            getSignatue (e.target.result, file, resultElement);
          };

          reader.onerror = function (e) {
            console.log ('Read error', e.type);
          }

        }

        resultElement.innerHTML = r;
      }

      /**
       * Processes the file bytes and appends the file description to the result element.
       * @param {*} fileData
       * @param {FILE} file
       * @param {*} resultElement
       */
      function getSignatue(fileData, file, resultElement) {

        // https://wasdk.github.io/WasmFiddle/
        // move -Force C:\Users\ekond\Downloads\program.wasm D:\MyStuff\EA\eakondratiev.github.io\assets\filesignature.wasm

        const params = {
            env: {
                memory_base: 0,
                table_base: 0,
                memory : new WebAssembly.Memory({ initial: 256}),
                table: new WebAssembly.Table({
                    initial: 0,
                    element: 'anyfunc',
                })
            }          
          };

        fetch('/assets/filesignature.wasm')
          .then(response =>
            response.arrayBuffer()
          )
          .then(bytes => WebAssembly.instantiate(bytes, params))
          .then(results => {

            var instance = results.instance;

            const { memory, getFileSignature } = instance.exports;

            // create input and output arrays
            let allZeroes = a => {
              for (let i = 0; i < a.length; i++) {a[i] = 0;}
            };

            // input
            const FILE_ARRAY_SIZE = 300; // some signatures uses an offset
            const RESULT_ARRAY_SIZE = 45;
            var MAX_SHOWN_BYTES = 16;

            let offset = 0;

            const fileBytes = new Uint8Array(memory.buffer, offset, FILE_ARRAY_SIZE);
            allZeroes (fileBytes);
            fileBytes.set(new Uint8Array (fileData, 0, Math.min (fileData.byteLength, FILE_ARRAY_SIZE)));

            // result
            offset += FILE_ARRAY_SIZE * Uint8Array.BYTES_PER_ELEMENT;
            const resultBytes = new Uint8Array(memory.buffer, offset, RESULT_ARRAY_SIZE);
            allZeroes (resultBytes);

            getFileSignature (fileBytes.byteOffset, resultBytes.byteOffset);

            var description = getDescription (getStringFromBuffer(resultBytes), resultBytes);

            resultElement.innerHTML += getResultProperty ('Description', description);

            if (description === 'unknown signature n/a') {
              resultElement.innerHTML += getResultProperty (
                  'First bytes',
                  getFirstBytes(fileBytes, Math.min(MAX_SHOWN_BYTES, file.size, FILE_ARRAY_SIZE)));
            }

            //console.log ('RES', {fileBytes, resultBytes});
            
          })
          .catch(err => {
            resultElement.innerHTML += '<div class="page-message page-message--error">' + err.toString() + "</div>";
            console.log(err);
            }
          );

      }

      /**
       * Returns html formatted file property.
       * @param {string} name
       * @param {string} value
       * @param {string} unit
       */
      function getResultProperty(name, value) {

        return '<div class="file-prop">' +
            '<span class="file-prop-name">' + name + '</span>' +
            '<span class="file-prop-value">' + value + '</span>' +
            '</div>';
      }

      /**
       * Returns string with the file size.
       * @param {number} size
       */
      function formatFileSize(size) {

        var FMT = {minimumFractionDigits: 0, maximumFractionDigits: 1};
        var KB = 1024;       // 2^10
        var MB = 1048576;    // 2^20
        var GB = 1073741824; // 2^30
        var t = '';

        if (size >= GB) {
          t = T.formatNumber(size/GB, 'en-US', FMT) + ' KB, ';
        }
        else if (size >= MB) {
          t = T.formatNumber(size/MB, 'en-US', FMT) + ' KB, ';
        }
        else if (size >= KB) {
          t = T.formatNumber(size/KB, 'en-US', FMT) + ' KB, ';
        }

        t += size + ' byte(s)';

        return t;
      }

      /**
       * Returns the string from the buffer array.
       * @param buf
       */
      function getStringFromBuffer (buf) {
        let s = "";
        let index = 0;
        while(true){
            if(buf[index] !== 0){
                s += String.fromCharCode(buf[index]);
                index++;
            }else{
                return s;
            }
        }

        return '';
      }

      /**
       * Returns the file description by the key.
       * @param {string} key
       * @param {[]} fileBytes
       */
      function getDescription(key, fileBytes) {

        if (key === '') {
          return 'signature not found';
        }

        if (SIGNATURES[key] === undefined) {
          return 'unknown signature ' + key;
        }

        return SIGNATURES[key].description;
      }

      /**
       * Returns the html list of all supported file descriptions.
       * @param list
       */
      function listAllDescriptions(list) {
        
        var keys = Object.keys (list);
        var i;
        var html = '';

        for (i = 0; i < keys.length; i++) {
          html += '<li>' + list[keys[i]].description + '</li>';
        }

        return '<p>Formats supported: <b>' + keys.length + '</b></p>' +
          '<ul>' + html + '</ul>';
      }
    
      /**
       * Returns html code with the first bytes of the array.
       * @param fileBytes
       * @param size
       */
      function getFirstBytes(fileBytes, size) {

        console.log ('BYTES', fileBytes);

        var i;
        var hex = '';
        var ascii = '';

        for (i = 0; i < size; i++) {
          hex += fileBytes[i].toString(16) + ' ';

          if (32 < fileBytes[i] && fileBytes[i] < 127) {
            // printable characters
            ascii += encodeChar (String.fromCharCode (fileBytes[i]));
          }
          else {
            ascii += '&middot;'
          }
        }

        return '<div class="code file-bytes">' +
          '<h4>Hex</h4>' + hex +
          '<h4>ASCII</h4>' + ascii +
          '</div>';
      }

      function encodeChar(char) {

        switch (char) {
          case '<': return '&lt;';
          case '>': return '&gt;';
          case '&': return '&amp;';
          default: return char;
        }
      }
    </script>
  </body>
</html>