function processFloatingPointValue(t,f){function r(b,p){var c,a,g=b.length;switch(g){case 32:var h=8;var l=127;break;case 64:h=11;l=1023;break;default:f.innerHTML="Must be 32 or 64 bits."}var m="";var q=h||8;for(a=0;a<b.length;a++)if(m+='<span class="fp-bit '+(0===a?"fp-sign":a<=(q||8)?"fp-exp":"fp-fraction")+'">'+b[a]+"</span>",7===a||15===a||23===a||31===a||39===a||47===a||55===a||63===a)m+=" ";a="<h2>"+g+'-bit representation</h2><div class="bits">'+m+"</div>";if(0===p)return a+"<p>Zero is a special case: all bits are zeroes.</p>";
var d='The sign bit <span class="fp-bit fp-sign">'+b[0]+"</span>: the number is ";0===b[0]?(d+="<b>positive</b>.",m="+",q=1):(d+="<b>negative</b>.",m="-",q=-1);a+="<p>"+d+"</p>";var e="";for(c=1;c<=h;c++)e+=b[c];d="The exponent stored as "+h+' bits <span class="fp-bit fp-exp">'+(e+"</span> = ");e=parseInt(e,2);a+="<p>"+(d+("<b>"+e+"</b> and the real value is "+e+" - "+l+" = <b>"+(e-l)+"</b>. So the exponent is <b>2<sup>"+(e-l)+"</sup></b>.</p>"));d="";var n=0;for(c=h+1;c<g;c++)0<c&&0===c%8&&(d+='</span> <span class="fp-bit fp-fraction">'),
d+=b[c],n+=b[c]*Math.pow(2,h-c);b={minimumFractionDigits:10,maximumFractionDigits:20};d="The fraction stored as "+(g-h-1)+' bits <span class="fp-bit fp-fraction">'+(d+"</span> = "+n+". The 1 is not stored but asumed, so the fraction is 1 + "+n+" = <b>"+T.formatNumber(1+n,"en-US",b)+"</b>.");a+="<p>"+d+"</p>";q*=(1+n)*Math.pow(2,e-l);return a+="<p>The number <b>"+p+"</b> is represented as <b>"+m+(1+n)+"&times;2<sup>"+(e-l)+"</sup> = <b>"+T.formatNumber(q,"en-US",b)+"</b></p >"}var k=T.getNumber(t.value);
f.innerHTML="";isNaN(k)||!isFinite(k)?f.innerHTML="n/a":fetch("/assets/fprep.wasm").then(b=>b.arrayBuffer()).then(b=>WebAssembly.instantiate(b)).then(b=>{const {memory:p,getFloatBits:c,getDoubleBits:a}=b.instance.exports;b=new Int32Array(p.buffer,0,32);const g=new Int32Array(p.buffer,0,64);c(b.byteOffset,k);f.innerHTML+=r(b,k);a(g.byteOffset,k);f.innerHTML+=r(g,k);f.innerHTML+='<p>The javascript representation is 64-bits</p><div class="content-wide"><b>'+k.toFixed(20)+"</b></div>"}).catch(console.error)}
;
